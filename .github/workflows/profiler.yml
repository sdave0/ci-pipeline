name: Pipeline Profiler

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

permissions:
  actions: read
  contents: write

jobs:
  profile:
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          run-id: ${{ github.event.workflow_run.id }}

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: .
          run-id: ${{ github.event.workflow_run.id }}

      - name: Download build log
        uses: actions/download-artifact@v4
        with:
          name: build-log
          path: .
          run-id: ${{ github.event.workflow_run.id }}

      - name: Analyze workflow run
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const response = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            let summary = `## Pipeline Profile for Workflow Run #${response.data.run_number}\n\n`;
            summary += `**Status:** ${response.data.conclusion}\n`;
            summary += `**Duration:** ${new Date(response.data.updated_at).getTime() - new Date(response.data.created_at).getTime()}ms\n\n`;

            summary += '| Job | Duration | Status |\n';
            summary += '| --- | --- | --- |\n';

            for (const job of jobs.data.jobs) {
              const duration = new Date(job.completed_at).getTime() - new Date(job.started_at).getTime();
              summary += `| ${job.name} | ${duration}ms | ${job.conclusion} |\n`;
            }

            summary += '\n### Test Summary\n';

            try {
              const testResults = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
              summary += `**Tests Passed:** ${testResults.numPassedTests}\n`;
              summary += `**Tests Failed:** ${testResults.numFailedTests}\n`;
              summary += `**Total Tests:** ${testResults.numTotalTests}\n`;
            } catch (error) {
              summary += 'Could not read test results.\n';
            }

            summary += '\n### Cache Summary\n';

            try {
              const buildLog = fs.readFileSync('build-log.txt', 'utf8');
              if (buildLog.includes('Cache hit for key')) {
                summary += '**Cache Hit:** Yes\n';
              } else {
                summary += '**Cache Hit:** No\n';
              }
            } catch (error) {
              summary += 'Could not read build log.\n';
            }

            core.summary.addRaw(summary).write();
